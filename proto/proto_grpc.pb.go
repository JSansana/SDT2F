// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package SDT

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Comunicacion_Jugador_LiderClient is the client API for Comunicacion_Jugador_Lider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Comunicacion_Jugador_LiderClient interface {
	//rpc Metodo(Request cliente) returns (respuesta servidor)
	//Etapa 1    (Arreglo con jugadas)     returns     (Arreglo con muertos) por cada ronda
	Etapa1_Mayor(ctx context.Context, in *Jugador_A_Lider_E1_Mayor, opts ...grpc.CallOption) (*Lider_A_Jugador_E1_Mayor, error)
	Cuatro(ctx context.Context, in *Jugador_A_Lider_E1_21, opts ...grpc.CallOption) (*Lider_A_Jugador_E1_21, error)
	//Etapa 2 (Arreglo con jugadas, Arreglo con equipos) returns (Arreglo con muertos)
	Etapa2(ctx context.Context, in *Jugador_A_Lider_E2_Cuerda, opts ...grpc.CallOption) (*Lider_A_Jugador_E2_Cuerda, error)
	//Etapa3 (Arreglo con jugadas, Arreglo con equipos) returns (Arreglo con muertos)
	Etapa3(ctx context.Context, in *Jugador_A_Lider_E3, opts ...grpc.CallOption) (*Lider_A_Jugador_E3, error)
	//Servicios transversales entre etapas
	Fin_Etapa(ctx context.Context, in *Jugador_A_Lider_Fin, opts ...grpc.CallOption) (*Lider_A_Jugador_Fin, error)
	Eliminar(ctx context.Context, in *Jugador_A_Lider_Eliminar, opts ...grpc.CallOption) (*Lider_A_Jugador_Eliminar, error)
	//Solicitud del Pozo, por parte del Jugador al Lider
	Pozo_Jugador(ctx context.Context, in *Jugador_A_Lider_Pozo, opts ...grpc.CallOption) (*Lider_A_Jugador_Pozo, error)
}

type comunicacion_Jugador_LiderClient struct {
	cc grpc.ClientConnInterface
}

func NewComunicacion_Jugador_LiderClient(cc grpc.ClientConnInterface) Comunicacion_Jugador_LiderClient {
	return &comunicacion_Jugador_LiderClient{cc}
}

func (c *comunicacion_Jugador_LiderClient) Etapa1_Mayor(ctx context.Context, in *Jugador_A_Lider_E1_Mayor, opts ...grpc.CallOption) (*Lider_A_Jugador_E1_Mayor, error) {
	out := new(Lider_A_Jugador_E1_Mayor)
	err := c.cc.Invoke(ctx, "/proto.Comunicacion_Jugador_Lider/Etapa1_Mayor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacion_Jugador_LiderClient) Cuatro(ctx context.Context, in *Jugador_A_Lider_E1_21, opts ...grpc.CallOption) (*Lider_A_Jugador_E1_21, error) {
	out := new(Lider_A_Jugador_E1_21)
	err := c.cc.Invoke(ctx, "/proto.Comunicacion_Jugador_Lider/Cuatro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacion_Jugador_LiderClient) Etapa2(ctx context.Context, in *Jugador_A_Lider_E2_Cuerda, opts ...grpc.CallOption) (*Lider_A_Jugador_E2_Cuerda, error) {
	out := new(Lider_A_Jugador_E2_Cuerda)
	err := c.cc.Invoke(ctx, "/proto.Comunicacion_Jugador_Lider/Etapa2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacion_Jugador_LiderClient) Etapa3(ctx context.Context, in *Jugador_A_Lider_E3, opts ...grpc.CallOption) (*Lider_A_Jugador_E3, error) {
	out := new(Lider_A_Jugador_E3)
	err := c.cc.Invoke(ctx, "/proto.Comunicacion_Jugador_Lider/Etapa3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacion_Jugador_LiderClient) Fin_Etapa(ctx context.Context, in *Jugador_A_Lider_Fin, opts ...grpc.CallOption) (*Lider_A_Jugador_Fin, error) {
	out := new(Lider_A_Jugador_Fin)
	err := c.cc.Invoke(ctx, "/proto.Comunicacion_Jugador_Lider/Fin_Etapa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacion_Jugador_LiderClient) Eliminar(ctx context.Context, in *Jugador_A_Lider_Eliminar, opts ...grpc.CallOption) (*Lider_A_Jugador_Eliminar, error) {
	out := new(Lider_A_Jugador_Eliminar)
	err := c.cc.Invoke(ctx, "/proto.Comunicacion_Jugador_Lider/Eliminar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacion_Jugador_LiderClient) Pozo_Jugador(ctx context.Context, in *Jugador_A_Lider_Pozo, opts ...grpc.CallOption) (*Lider_A_Jugador_Pozo, error) {
	out := new(Lider_A_Jugador_Pozo)
	err := c.cc.Invoke(ctx, "/proto.Comunicacion_Jugador_Lider/Pozo_Jugador", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Comunicacion_Jugador_LiderServer is the server API for Comunicacion_Jugador_Lider service.
// All implementations must embed UnimplementedComunicacion_Jugador_LiderServer
// for forward compatibility
type Comunicacion_Jugador_LiderServer interface {
	//rpc Metodo(Request cliente) returns (respuesta servidor)
	//Etapa 1    (Arreglo con jugadas)     returns     (Arreglo con muertos) por cada ronda
	Etapa1_Mayor(context.Context, *Jugador_A_Lider_E1_Mayor) (*Lider_A_Jugador_E1_Mayor, error)
	Cuatro(context.Context, *Jugador_A_Lider_E1_21) (*Lider_A_Jugador_E1_21, error)
	//Etapa 2 (Arreglo con jugadas, Arreglo con equipos) returns (Arreglo con muertos)
	Etapa2(context.Context, *Jugador_A_Lider_E2_Cuerda) (*Lider_A_Jugador_E2_Cuerda, error)
	//Etapa3 (Arreglo con jugadas, Arreglo con equipos) returns (Arreglo con muertos)
	Etapa3(context.Context, *Jugador_A_Lider_E3) (*Lider_A_Jugador_E3, error)
	//Servicios transversales entre etapas
	Fin_Etapa(context.Context, *Jugador_A_Lider_Fin) (*Lider_A_Jugador_Fin, error)
	Eliminar(context.Context, *Jugador_A_Lider_Eliminar) (*Lider_A_Jugador_Eliminar, error)
	//Solicitud del Pozo, por parte del Jugador al Lider
	Pozo_Jugador(context.Context, *Jugador_A_Lider_Pozo) (*Lider_A_Jugador_Pozo, error)
	mustEmbedUnimplementedComunicacion_Jugador_LiderServer()
}

// UnimplementedComunicacion_Jugador_LiderServer must be embedded to have forward compatible implementations.
type UnimplementedComunicacion_Jugador_LiderServer struct {
}

func (UnimplementedComunicacion_Jugador_LiderServer) Etapa1_Mayor(context.Context, *Jugador_A_Lider_E1_Mayor) (*Lider_A_Jugador_E1_Mayor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Etapa1_Mayor not implemented")
}
func (UnimplementedComunicacion_Jugador_LiderServer) Cuatro(context.Context, *Jugador_A_Lider_E1_21) (*Lider_A_Jugador_E1_21, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cuatro not implemented")
}
func (UnimplementedComunicacion_Jugador_LiderServer) Etapa2(context.Context, *Jugador_A_Lider_E2_Cuerda) (*Lider_A_Jugador_E2_Cuerda, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Etapa2 not implemented")
}
func (UnimplementedComunicacion_Jugador_LiderServer) Etapa3(context.Context, *Jugador_A_Lider_E3) (*Lider_A_Jugador_E3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Etapa3 not implemented")
}
func (UnimplementedComunicacion_Jugador_LiderServer) Fin_Etapa(context.Context, *Jugador_A_Lider_Fin) (*Lider_A_Jugador_Fin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fin_Etapa not implemented")
}
func (UnimplementedComunicacion_Jugador_LiderServer) Eliminar(context.Context, *Jugador_A_Lider_Eliminar) (*Lider_A_Jugador_Eliminar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Eliminar not implemented")
}
func (UnimplementedComunicacion_Jugador_LiderServer) Pozo_Jugador(context.Context, *Jugador_A_Lider_Pozo) (*Lider_A_Jugador_Pozo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pozo_Jugador not implemented")
}
func (UnimplementedComunicacion_Jugador_LiderServer) mustEmbedUnimplementedComunicacion_Jugador_LiderServer() {
}

// UnsafeComunicacion_Jugador_LiderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Comunicacion_Jugador_LiderServer will
// result in compilation errors.
type UnsafeComunicacion_Jugador_LiderServer interface {
	mustEmbedUnimplementedComunicacion_Jugador_LiderServer()
}

func RegisterComunicacion_Jugador_LiderServer(s grpc.ServiceRegistrar, srv Comunicacion_Jugador_LiderServer) {
	s.RegisterService(&Comunicacion_Jugador_Lider_ServiceDesc, srv)
}

func _Comunicacion_Jugador_Lider_Etapa1_Mayor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugador_A_Lider_E1_Mayor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Comunicacion_Jugador_LiderServer).Etapa1_Mayor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunicacion_Jugador_Lider/Etapa1_Mayor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Comunicacion_Jugador_LiderServer).Etapa1_Mayor(ctx, req.(*Jugador_A_Lider_E1_Mayor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comunicacion_Jugador_Lider_Cuatro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugador_A_Lider_E1_21)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Comunicacion_Jugador_LiderServer).Cuatro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunicacion_Jugador_Lider/Cuatro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Comunicacion_Jugador_LiderServer).Cuatro(ctx, req.(*Jugador_A_Lider_E1_21))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comunicacion_Jugador_Lider_Etapa2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugador_A_Lider_E2_Cuerda)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Comunicacion_Jugador_LiderServer).Etapa2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunicacion_Jugador_Lider/Etapa2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Comunicacion_Jugador_LiderServer).Etapa2(ctx, req.(*Jugador_A_Lider_E2_Cuerda))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comunicacion_Jugador_Lider_Etapa3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugador_A_Lider_E3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Comunicacion_Jugador_LiderServer).Etapa3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunicacion_Jugador_Lider/Etapa3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Comunicacion_Jugador_LiderServer).Etapa3(ctx, req.(*Jugador_A_Lider_E3))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comunicacion_Jugador_Lider_Fin_Etapa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugador_A_Lider_Fin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Comunicacion_Jugador_LiderServer).Fin_Etapa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunicacion_Jugador_Lider/Fin_Etapa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Comunicacion_Jugador_LiderServer).Fin_Etapa(ctx, req.(*Jugador_A_Lider_Fin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comunicacion_Jugador_Lider_Eliminar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugador_A_Lider_Eliminar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Comunicacion_Jugador_LiderServer).Eliminar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunicacion_Jugador_Lider/Eliminar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Comunicacion_Jugador_LiderServer).Eliminar(ctx, req.(*Jugador_A_Lider_Eliminar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comunicacion_Jugador_Lider_Pozo_Jugador_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jugador_A_Lider_Pozo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Comunicacion_Jugador_LiderServer).Pozo_Jugador(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunicacion_Jugador_Lider/Pozo_Jugador",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Comunicacion_Jugador_LiderServer).Pozo_Jugador(ctx, req.(*Jugador_A_Lider_Pozo))
	}
	return interceptor(ctx, in, info, handler)
}

// Comunicacion_Jugador_Lider_ServiceDesc is the grpc.ServiceDesc for Comunicacion_Jugador_Lider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comunicacion_Jugador_Lider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Comunicacion_Jugador_Lider",
	HandlerType: (*Comunicacion_Jugador_LiderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Etapa1_Mayor",
			Handler:    _Comunicacion_Jugador_Lider_Etapa1_Mayor_Handler,
		},
		{
			MethodName: "Cuatro",
			Handler:    _Comunicacion_Jugador_Lider_Cuatro_Handler,
		},
		{
			MethodName: "Etapa2",
			Handler:    _Comunicacion_Jugador_Lider_Etapa2_Handler,
		},
		{
			MethodName: "Etapa3",
			Handler:    _Comunicacion_Jugador_Lider_Etapa3_Handler,
		},
		{
			MethodName: "Fin_Etapa",
			Handler:    _Comunicacion_Jugador_Lider_Fin_Etapa_Handler,
		},
		{
			MethodName: "Eliminar",
			Handler:    _Comunicacion_Jugador_Lider_Eliminar_Handler,
		},
		{
			MethodName: "Pozo_Jugador",
			Handler:    _Comunicacion_Jugador_Lider_Pozo_Jugador_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}

// Comunicacion_Lider_PozoClient is the client API for Comunicacion_Lider_Pozo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Comunicacion_Lider_PozoClient interface {
	Pozo_Lider(ctx context.Context, in *Lider_A_Pozo, opts ...grpc.CallOption) (*Pozo_A_Lider, error)
	Arreglo_Pozo(ctx context.Context, in *ArregloLider_A_Pozo, opts ...grpc.CallOption) (*ArregloPozo_A_Lider, error)
}

type comunicacion_Lider_PozoClient struct {
	cc grpc.ClientConnInterface
}

func NewComunicacion_Lider_PozoClient(cc grpc.ClientConnInterface) Comunicacion_Lider_PozoClient {
	return &comunicacion_Lider_PozoClient{cc}
}

func (c *comunicacion_Lider_PozoClient) Pozo_Lider(ctx context.Context, in *Lider_A_Pozo, opts ...grpc.CallOption) (*Pozo_A_Lider, error) {
	out := new(Pozo_A_Lider)
	err := c.cc.Invoke(ctx, "/proto.Comunicacion_Lider_Pozo/Pozo_Lider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacion_Lider_PozoClient) Arreglo_Pozo(ctx context.Context, in *ArregloLider_A_Pozo, opts ...grpc.CallOption) (*ArregloPozo_A_Lider, error) {
	out := new(ArregloPozo_A_Lider)
	err := c.cc.Invoke(ctx, "/proto.Comunicacion_Lider_Pozo/Arreglo_Pozo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Comunicacion_Lider_PozoServer is the server API for Comunicacion_Lider_Pozo service.
// All implementations must embed UnimplementedComunicacion_Lider_PozoServer
// for forward compatibility
type Comunicacion_Lider_PozoServer interface {
	Pozo_Lider(context.Context, *Lider_A_Pozo) (*Pozo_A_Lider, error)
	Arreglo_Pozo(context.Context, *ArregloLider_A_Pozo) (*ArregloPozo_A_Lider, error)
	mustEmbedUnimplementedComunicacion_Lider_PozoServer()
}

// UnimplementedComunicacion_Lider_PozoServer must be embedded to have forward compatible implementations.
type UnimplementedComunicacion_Lider_PozoServer struct {
}

func (UnimplementedComunicacion_Lider_PozoServer) Pozo_Lider(context.Context, *Lider_A_Pozo) (*Pozo_A_Lider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pozo_Lider not implemented")
}
func (UnimplementedComunicacion_Lider_PozoServer) Arreglo_Pozo(context.Context, *ArregloLider_A_Pozo) (*ArregloPozo_A_Lider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Arreglo_Pozo not implemented")
}
func (UnimplementedComunicacion_Lider_PozoServer) mustEmbedUnimplementedComunicacion_Lider_PozoServer() {
}

// UnsafeComunicacion_Lider_PozoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Comunicacion_Lider_PozoServer will
// result in compilation errors.
type UnsafeComunicacion_Lider_PozoServer interface {
	mustEmbedUnimplementedComunicacion_Lider_PozoServer()
}

func RegisterComunicacion_Lider_PozoServer(s grpc.ServiceRegistrar, srv Comunicacion_Lider_PozoServer) {
	s.RegisterService(&Comunicacion_Lider_Pozo_ServiceDesc, srv)
}

func _Comunicacion_Lider_Pozo_Pozo_Lider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lider_A_Pozo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Comunicacion_Lider_PozoServer).Pozo_Lider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunicacion_Lider_Pozo/Pozo_Lider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Comunicacion_Lider_PozoServer).Pozo_Lider(ctx, req.(*Lider_A_Pozo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comunicacion_Lider_Pozo_Arreglo_Pozo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArregloLider_A_Pozo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Comunicacion_Lider_PozoServer).Arreglo_Pozo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunicacion_Lider_Pozo/Arreglo_Pozo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Comunicacion_Lider_PozoServer).Arreglo_Pozo(ctx, req.(*ArregloLider_A_Pozo))
	}
	return interceptor(ctx, in, info, handler)
}

// Comunicacion_Lider_Pozo_ServiceDesc is the grpc.ServiceDesc for Comunicacion_Lider_Pozo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comunicacion_Lider_Pozo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Comunicacion_Lider_Pozo",
	HandlerType: (*Comunicacion_Lider_PozoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pozo_Lider",
			Handler:    _Comunicacion_Lider_Pozo_Pozo_Lider_Handler,
		},
		{
			MethodName: "Arreglo_Pozo",
			Handler:    _Comunicacion_Lider_Pozo_Arreglo_Pozo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}

// Comunicacion_Lider_NamenodeClient is the client API for Comunicacion_Lider_Namenode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Comunicacion_Lider_NamenodeClient interface {
	Enviar_Jugada(ctx context.Context, in *Lider_A_Namenode, opts ...grpc.CallOption) (*Namenode_A_Lider, error)
}

type comunicacion_Lider_NamenodeClient struct {
	cc grpc.ClientConnInterface
}

func NewComunicacion_Lider_NamenodeClient(cc grpc.ClientConnInterface) Comunicacion_Lider_NamenodeClient {
	return &comunicacion_Lider_NamenodeClient{cc}
}

func (c *comunicacion_Lider_NamenodeClient) Enviar_Jugada(ctx context.Context, in *Lider_A_Namenode, opts ...grpc.CallOption) (*Namenode_A_Lider, error) {
	out := new(Namenode_A_Lider)
	err := c.cc.Invoke(ctx, "/proto.Comunicacion_Lider_Namenode/Enviar_Jugada", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Comunicacion_Lider_NamenodeServer is the server API for Comunicacion_Lider_Namenode service.
// All implementations must embed UnimplementedComunicacion_Lider_NamenodeServer
// for forward compatibility
type Comunicacion_Lider_NamenodeServer interface {
	Enviar_Jugada(context.Context, *Lider_A_Namenode) (*Namenode_A_Lider, error)
	mustEmbedUnimplementedComunicacion_Lider_NamenodeServer()
}

// UnimplementedComunicacion_Lider_NamenodeServer must be embedded to have forward compatible implementations.
type UnimplementedComunicacion_Lider_NamenodeServer struct {
}

func (UnimplementedComunicacion_Lider_NamenodeServer) Enviar_Jugada(context.Context, *Lider_A_Namenode) (*Namenode_A_Lider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enviar_Jugada not implemented")
}
func (UnimplementedComunicacion_Lider_NamenodeServer) mustEmbedUnimplementedComunicacion_Lider_NamenodeServer() {
}

// UnsafeComunicacion_Lider_NamenodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Comunicacion_Lider_NamenodeServer will
// result in compilation errors.
type UnsafeComunicacion_Lider_NamenodeServer interface {
	mustEmbedUnimplementedComunicacion_Lider_NamenodeServer()
}

func RegisterComunicacion_Lider_NamenodeServer(s grpc.ServiceRegistrar, srv Comunicacion_Lider_NamenodeServer) {
	s.RegisterService(&Comunicacion_Lider_Namenode_ServiceDesc, srv)
}

func _Comunicacion_Lider_Namenode_Enviar_Jugada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lider_A_Namenode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Comunicacion_Lider_NamenodeServer).Enviar_Jugada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunicacion_Lider_Namenode/Enviar_Jugada",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Comunicacion_Lider_NamenodeServer).Enviar_Jugada(ctx, req.(*Lider_A_Namenode))
	}
	return interceptor(ctx, in, info, handler)
}

// Comunicacion_Lider_Namenode_ServiceDesc is the grpc.ServiceDesc for Comunicacion_Lider_Namenode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comunicacion_Lider_Namenode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Comunicacion_Lider_Namenode",
	HandlerType: (*Comunicacion_Lider_NamenodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enviar_Jugada",
			Handler:    _Comunicacion_Lider_Namenode_Enviar_Jugada_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}

// Comunicacion_Namenode_DatanodeClient is the client API for Comunicacion_Namenode_Datanode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Comunicacion_Namenode_DatanodeClient interface {
	Guardar_Jugada(ctx context.Context, in *Namenode_A_Datanode, opts ...grpc.CallOption) (*Datanode_A_Namenode, error)
}

type comunicacion_Namenode_DatanodeClient struct {
	cc grpc.ClientConnInterface
}

func NewComunicacion_Namenode_DatanodeClient(cc grpc.ClientConnInterface) Comunicacion_Namenode_DatanodeClient {
	return &comunicacion_Namenode_DatanodeClient{cc}
}

func (c *comunicacion_Namenode_DatanodeClient) Guardar_Jugada(ctx context.Context, in *Namenode_A_Datanode, opts ...grpc.CallOption) (*Datanode_A_Namenode, error) {
	out := new(Datanode_A_Namenode)
	err := c.cc.Invoke(ctx, "/proto.Comunicacion_Namenode_Datanode/Guardar_Jugada", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Comunicacion_Namenode_DatanodeServer is the server API for Comunicacion_Namenode_Datanode service.
// All implementations must embed UnimplementedComunicacion_Namenode_DatanodeServer
// for forward compatibility
type Comunicacion_Namenode_DatanodeServer interface {
	Guardar_Jugada(context.Context, *Namenode_A_Datanode) (*Datanode_A_Namenode, error)
	mustEmbedUnimplementedComunicacion_Namenode_DatanodeServer()
}

// UnimplementedComunicacion_Namenode_DatanodeServer must be embedded to have forward compatible implementations.
type UnimplementedComunicacion_Namenode_DatanodeServer struct {
}

func (UnimplementedComunicacion_Namenode_DatanodeServer) Guardar_Jugada(context.Context, *Namenode_A_Datanode) (*Datanode_A_Namenode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Guardar_Jugada not implemented")
}
func (UnimplementedComunicacion_Namenode_DatanodeServer) mustEmbedUnimplementedComunicacion_Namenode_DatanodeServer() {
}

// UnsafeComunicacion_Namenode_DatanodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Comunicacion_Namenode_DatanodeServer will
// result in compilation errors.
type UnsafeComunicacion_Namenode_DatanodeServer interface {
	mustEmbedUnimplementedComunicacion_Namenode_DatanodeServer()
}

func RegisterComunicacion_Namenode_DatanodeServer(s grpc.ServiceRegistrar, srv Comunicacion_Namenode_DatanodeServer) {
	s.RegisterService(&Comunicacion_Namenode_Datanode_ServiceDesc, srv)
}

func _Comunicacion_Namenode_Datanode_Guardar_Jugada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Namenode_A_Datanode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Comunicacion_Namenode_DatanodeServer).Guardar_Jugada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Comunicacion_Namenode_Datanode/Guardar_Jugada",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Comunicacion_Namenode_DatanodeServer).Guardar_Jugada(ctx, req.(*Namenode_A_Datanode))
	}
	return interceptor(ctx, in, info, handler)
}

// Comunicacion_Namenode_Datanode_ServiceDesc is the grpc.ServiceDesc for Comunicacion_Namenode_Datanode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comunicacion_Namenode_Datanode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Comunicacion_Namenode_Datanode",
	HandlerType: (*Comunicacion_Namenode_DatanodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Guardar_Jugada",
			Handler:    _Comunicacion_Namenode_Datanode_Guardar_Jugada_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
